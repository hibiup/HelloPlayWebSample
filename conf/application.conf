# https://www.playframework.com/documentation/latest/Configuration

# 在 AsyncController 中需要隐式获得一个线程池。 Play 内置集成了Akka，在这里我们可以配置它的线程池。
akka {
  actor {
    default-dispatcher {
      fork-join-executor {
        # Settings this to 1 instead of 3 seems to improve performance.
        parallelism-factor = 1.0

        parallelism-max = 24

        # Setting this to LIFO changes the fork-join-executor
        # to use a stack discipline for task scheduling. This usually
        # improves throughput at the cost of possibly increasing
        # latency and risking task starvation (which should be rare).
        task-peeking-mode = LIFO
      }
    }
  }
}

# 可以定义多个线程池来满足不同的需求，比如我们再定义一个名为“my-context” 的线程池，在 Controller 中明确地获得它：
#
#    class MyExecutionContext @Inject()(actorSystem: ActorSystem) extends CustomExecutionContext(actorSystem, "my-context")
# 或
#    val implicit myExecutionContext: ExecutionContext = akkaSystem.dispatchers.lookup("my-context")
#
# 同样可以被 Controller 入口方法的隐式参数捕获
my-context {
  fork-join-executor {
    parallelism-factor = 20.0
    parallelism-max = 200
  }}

# Global error handler
play.http.errorHandler = "filters.CustomErrorHandler"

# Authentication
play.modules.enabled += "modules.SecurityModule"
baseUrl="http://localhost:9000"

# Filters
play.http.filters = "filters.CustomHttpFilters"

# PAC4J security filter configuration
# 可以配置多个URL，配置顺序按优先级从高到低。每一项的可配置选项同 Secure 参数(参考 AuthCotroller).
pac4j.security.rules = [
  # "_anonymous_" 表示该资源可匿名访问
  {
    "/loginForm" = {
      authorizers = "_anonymous_"
    }
  }
  # 对 /admin 之下的资源指定采用 FormClient 和 DirectBasicAuthClient 认证机制, 并使用 admin_authorizer 做授权比对。
  # DirectBasicAuthClient 和 admin_authorizer 都需在 SecurityModule 中注册.（参见 SecurityModule 中的 Config 说明）
  {
    "/admin/.*" = {
      clients = "FormClient,DirectBasicAuthClient"
      authorizers = "admin_authorizer"
    }
  }
  ## "_authenticated_" 表示该资源的访问需要认证，可以使用任意注册过的 client
  #{"/auth" = {
  #  authorizers = "_authenticated_"
  #}}
  # JWT 机制保护的资源。
  # 如果我们希望 JWT token 通过 http header 传递，使用 HeaderClient 机制，或如果希望通过 URL 参数传递，则使用 ParameterClient 机制，
  # 详见 SecurityModule 中的说明
  {
    "/jwt/.*" = {
      clients = "HeaderClient,ParameterClient"
    }
  }
  ## 'Catch all' rule to make sure the whole application stays secure.
  #{".*" = {
  #  authorizers = "_authenticated_"
  #  clients = "FormClient,TwitterClient"
  #  matchers = "excludedPath"
  #}}
]

# 加密 jwt token 的密钥
pac4j.security.jwt_secret = "11bff63d623e7f7f53b70ea5f1ec2954aa582c19ac13cd082b704ba8c6f4d5d6"
